#version 330 core
uniform sampler2D texture1; // tipo sampler2D para texturas 
uniform vec3 color_front;
uniform vec3 color_back;
uniform vec4 lightPos;
uniform vec4 intLuz;     // intensidad de luz, ahora no la vamos a usar

in vec2 TexCoords;               // out del vertex shader
in vec3 Normal;

out vec4 fFragColor;        // out del fragment shader

void main() {
	vec3 color = vec3(texture(texture1, TexCoords));

    if(color.x > 0.55) discard;

    if(gl_FrontFacing){
        vec3 norm = normalize(Normal);
        vec3 lightDir = normalize(vec3(lightPos));
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = vec3(intLuz) * diff;
        fFragColor = vec4(color_front * diffuse, 1.0);
    }
    else {
        vec3 norm = -normalize(Normal);
        vec3 lightDir = normalize(vec3(lightPos));
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = vec3(intLuz) * diff;
        fFragColor = vec4(color_front * diffuse, 1.0);
        fFragColor = vec4(color_back * diffuse, 1.0);
    }

}